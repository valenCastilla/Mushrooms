#IMPORTACIÓN DEL DATASET

data_original = pd.read_csv('/content/drive/MyDrive/IAA/secondary_data.csv', sep=';')
data = data_original.copy()
data.info()
data


  #  ---------- ========== ---------- ========== ---------- EXPLORACIÓN  ---------- ========== ---------- ========== ----------

def mostrar_data_actual(data):
  print('Cantidad de instancias:', data.shape[0],  end='\n\n')
  print('Cantidad de columnas:',data.shape[1],  end='\n\n' )
  print(data.info(), end='\n\n')

data_check_1 = data.copy()
mostrar_data_actual(data_check_1)



# Exploramos cada una de las columnas no numericas, vemos la cantidad de hongos venenosos y no venenosos.

resumen = []

columnas_no_numericas = data.select_dtypes(exclude=[np.number]).columns

for column in columnas_no_numericas:
    grupos = data.groupby(column)

    clases = []
    cant_instancias = []
    cant_p = []
    cant_e = []

    for valor, data_agrupada in grupos:
        clases.append(valor)
        cant_instancias.append(len(data_agrupada))
        cant_p.append((data_agrupada['class'] == 'p').sum())
        cant_e.append((data_agrupada['class'] == 'e').sum())

    res = pd.DataFrame({
        'Clase': clases,
        'Cantidad de Instancias': cant_instancias,
        'Cantidad de "p"': cant_p,
        'Cantidad de "e"': cant_e
    })

    resumen.append((column, res))

for column, res in resumen:
    print(f"En {column} hay {data[column].nunique()} variables. Estas variables son:")
    print(tabulate(res, headers='keys', tablefmt='grid'))
    print("\n")

data.describe()

# Armamos un dataset solamente con las columnas numericas
data_numerica = data.select_dtypes(include=[np.number])


# HACEMOS HISTOGRAMA DE LAS VARIABLES NUMÉRICAS

for feature in data_numerica.columns:
    plt.figure(figsize=(8, 6))
    plt.hist(data[feature], bins=60, edgecolor='k', alpha=0.7)

    plt.title(f"Histograma de {feature}")
    plt.xlabel(feature)
    plt.ylabel('Frecuencia')

    plt.show()


# HACEMOS HISTOGRAMA 2 DE LAS VARIABLES NUMÉRICAS incluyendo la separación por ´class´

for columna in data_numerica.columns:
    plt.figure(figsize=(10, 5))
    plt.hist(data[data['class'] == "p"][columna], bins=30, alpha=0.5, color='blue', label='class= venenosa')
    plt.hist(data[data['class'] == "e"][columna], bins=30, alpha=0.5, color='green', label='class= comestible')
    plt.legend()
    plt.xlabel(columna)
    plt.ylabel("Frecuencia")
    plt.title(f'Histograma de {columna}')
    plt.xlabel(columna)
    plt.ylabel('Frecuencia')
    plt.legend()
    plt.show() 


# Hacemos un boxplot para ver la distribución y los outliers

plt.figure(figsize=(8, 6))

plt.boxplot([data[feature] for feature in data_numerica.columns], labels= data_numerica.columns)

plt.title("Boxplots de features numericas")
plt.xlabel("Feature")
plt.ylabel("Valor")
plt.grid(True)

plt.show() 


# Analizamos la cantidad de valores iguales a 0 en las variables numericas

for columna in data_numerica.columns:
    total_count = len(data)
    zero_count = (data[columna] == 0).sum()
    zero_percentage = (zero_count / total_count) * 100

    print(f"El porcentaje de instancias con valor 0 en '{columna}' es: {zero_percentage:.2f}%") 

